[{"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\configureStore.js":"1","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\MainComponent.js":"2","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\ContactComponent.js":"3","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionTypes.js":"4","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionCreators.js":"5","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\comments.js":"6","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\promotions.js":"7","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\MenuComponent.js":"8","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\HomeComponent.js":"9","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\DishDetailComponent.js":"10","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\CommentFormComponent.js":"11","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\AboutComponent.js":"12","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\leaders.js":"13"},{"size":794,"mtime":1617290034874,"results":"14","hashOfConfig":"15"},{"size":3779,"mtime":1617608497527,"results":"16","hashOfConfig":"15"},{"size":8395,"mtime":1617521008301,"results":"17","hashOfConfig":"15"},{"size":554,"mtime":1617608883212,"results":"18","hashOfConfig":"15"},{"size":6068,"mtime":1617608841322,"results":"19","hashOfConfig":"15"},{"size":539,"mtime":1617440178492,"results":"20","hashOfConfig":"15"},{"size":683,"mtime":1617427465396,"results":"21","hashOfConfig":"15"},{"size":2476,"mtime":1617428406464,"results":"22","hashOfConfig":"15"},{"size":1945,"mtime":1617610096293,"results":"23","hashOfConfig":"15"},{"size":6749,"mtime":1617444553434,"results":"24","hashOfConfig":"15"},{"size":6467,"mtime":1617440938160,"results":"25","hashOfConfig":"15"},{"size":8276,"mtime":1617506160962,"results":"26","hashOfConfig":"15"},{"size":660,"mtime":1617608914608,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j4qpmy",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\configureStore.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\MainComponent.js",["58"],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\ContactComponent.js",["59","60","61","62","63","64","65","66","67"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem,\r\n    Button, Row, Col, Label } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, Form, Errors, actions } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component{\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);        \r\n    }\r\n\r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        alert('Current State is: ' + JSON.stringify(values));\r\n        this.props.postFeedback(values);\r\n        this.props.resetFeedbackForm();\r\n        // event.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>                \r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                   <div className=\"col-12\">\r\n                      <h3>Send us your Feedback</h3>\r\n                   </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                    <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\" placeholder=\"First name\" className=\"form-control\" validators={{ required, minLength:  minLength(3), maxLength: maxLength(15)}}  />\r\n                                    <Errors className=\"text-danger\" model=\".firstname\" show=\"touched\" messages={{ required: 'Required', minLength: 'Must be greater than 2 characters', maxLength: 'Must be 15 charaters or less'}} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\" placeholder=\"Last name\" className=\"form-control\" validators={{ required, minLength:  minLength(3), maxLength: maxLength(15)}} />\r\n                                    <Errors className=\"text-danger\" model=\".lastname\" show=\"touched\" messages={{ required: 'Required', minLength: 'Must be greater than 2 characters', maxLength: 'Must be 15 charaters or less'}} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\" placeholder=\"Tel. number\" className=\"form-control\" validators={{ required, minLength:  minLength(3), maxLength: maxLength(15), isNumber}} />\r\n                                    <Errors className=\"text-danger\" model=\".telnum\" show=\"touched\" messages={{ required: 'Required', minLength: 'Must be greater than 2 characters', maxLength: 'Must be 15 charaters or less', isNumber: 'Must be a number'}} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\" placeholder=\"Email\" className = \"form-control\" validators={{ required, validEmail}} />\r\n                                    <Errors className=\"text-danger\" model=\".email\" show=\"touched\" messages={{ required: 'Required', validEmail: 'Invalid email address'}} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\" className=\"form-check-input\" /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Contact;","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionTypes.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionCreators.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\comments.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\promotions.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\MenuComponent.js",["68","69","70","71"],"import React from 'react';\r\nimport { Card, CardImg, CardImgOverlay,\r\n    CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { addComment, fetchDishes, fetchComments, fetchPromos } from '../redux/ActionCreators';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\n    function RenderMenuItem ({dish, onClick}) {\r\n        return (\r\n            <Card>\r\n                <Link to={`/menu/${dish.id}`} >\r\n                <CardImg width=\"100%\" src={baseUrl + dish.image} alt={dish.name} />\r\n                    <CardImgOverlay>\r\n                        <CardTitle>{dish.name}</CardTitle>\r\n                    </CardImgOverlay>\r\n                </Link>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    const Menu = (props) => {\r\n\r\n        const menu = props.dishes.dishes.map((dish) => {\r\n            return (\r\n                <div className=\"col-12 col-md-5 m-1\"  key={dish.id}>\r\n                    <RenderMenuItem dish={dish} />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        if (props.dishes.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.dishes.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\"> \r\n                        <div className=\"col-12\">\r\n                            <h4>{props.dishes.errMess}</h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                            <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <div className=\"col-12\">\r\n                            <h3>Menu</h3>\r\n                            <hr />\r\n                        </div>                \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        {menu}\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n\r\nexport default Menu;","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\HomeComponent.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\DishDetailComponent.js",["72","73"],"import React, { Component } from \"react\";\r\nimport { Card, CardImg, CardImgOverlay, CardTitle, Breadcrumb, BreadcrumbItem, CardBody, CardText } from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\n/* import {\r\n    Button, Modal, ModalBody, ModalHeader, Label, Row, Col\r\n} from \"reactstrap\";\r\nimport { Control, LocalForm, Errors } from 'react-redux-form'; */\r\nimport { Loading } from './LoadingComponent';\r\nimport CommentForm from \"./CommentFormComponent\";\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { FadeTransform, Fade, Stagger } from 'react-animation-components';\r\n\r\nfunction RenderDish({dish}) {\r\n    if (dish != null) {\r\n        return (\r\n            <div className='col-12 col-md-5 m-1'>\r\n                <FadeTransform\r\n                in\r\n                transformProps={{\r\n                    exitTransform: 'scale(0.5) translateY(-50%)'\r\n                }}>\r\n                <Card>\r\n                    <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{dish.name}</CardTitle>\r\n                        <CardText>{dish.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </FadeTransform>\r\n            </div>   \r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction RenderComments({comments, postComment, dishId}){\r\n    if (comments == null) {\r\n        return (<div></div>)\r\n    }\r\n    const cmnts = comments.map(comment => {\r\n        return (\r\n\r\n            <li key={comment.id}>\r\n                <p>{comment.comment}</p>\r\n                <p>-- {comment.author},\r\n                &nbsp;\r\n                {new Intl.DateTimeFormat('en-US', {\r\n                    year: 'numeric',\r\n                    month: 'long',\r\n                    day: '2-digit'\r\n                }).format(new Date(comment.date))}\r\n                </p>\r\n            </li>\r\n\r\n        )\r\n    })\r\n    return (\r\n        <div className='col-12 col-md-5 m-1'>\r\n            <h4> Comments </h4>\r\n            <ul className='list-unstyled'>\r\n                <Stagger in>\r\n                    <Fade in>\r\n                        {cmnts}\r\n                    </Fade>\r\n                </Stagger>\r\n            </ul>\r\n            <CommentForm dishId={dishId} postComment={postComment} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst DishDetail = (props) => {\r\n    const dish = props.dish\r\n\r\n    if (props.isLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    else if (dish == null) {\r\n        return (<div></div>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem>\r\n                        <Link to=\"/menu\">Menu</Link>\r\n                    </BreadcrumbItem>\r\n                    <BreadcrumbItem active>\r\n                        { props.dish.name }\r\n                    </BreadcrumbItem>\r\n                </Breadcrumb>\r\n\r\n                <div className=\"col-12\">\r\n                    <h3> {props.dish.menu}</h3>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n\r\n            <div className='row'>\r\n                <RenderDish dish={ props.dish } />\r\n                <RenderComments comments={ props.comments }\r\n                    postComment={props.postComment}\r\n                    dishId={props.dish.id} />\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DishDetail; \r\n\r\n/*\r\n------------------------------BEFORE FEEDBACK FORM-------------------------------\r\nimport React from 'react';\r\nimport { Card, CardImg, CardText, CardBody,\r\n    CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction RenderDish({dish}){\r\n    if (dish != null){\r\n        return(\r\n            <div className=\"col-12 col-md-5 m-1\"> \r\n                <Card >\r\n                    <CardImg top src={dish.image} alt={dish.name}/>\r\n                    <CardBody>\r\n                        <CardTitle>{dish.name} </CardTitle>\r\n                        <CardText> {dish.description} </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>    \r\n        );\r\n    }else{\r\n        return (<div></div>);\r\n    }\r\n}\r\n\r\nfunction RenderComments({comments}){\r\n    if (comments != null){\r\n        return(\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <h4> Comments </h4>\r\n                <div className=\"container\">\r\n                <ul className=\"list-unstyled\">\r\n                        {\r\n                            comments.map((comment)=>{\r\n                                return(\r\n                                    <li className=\"row\" key={comment.id}><p>{comment.comment}</p>\r\n                                    <p>-- {comment.author}, {new Intl.DateTimeFormat('en-US',{year: 'numeric', month: 'short', day:'2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                                    </li>    \r\n                                );\r\n                            })\r\n                        }\r\n                </ul>  \r\n                </div>      \r\n            </div>\r\n        );\r\n    }else{\r\n        return (<div></div>);\r\n    }\r\n}\r\n\r\nconst DishDetail = (props) => { \r\n    console.log(\"DishDetail Component render invoked\")\r\n    if(props.dish == null){\r\n        return(\r\n            <div></div>\r\n        );\r\n    }else{\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>{props.dish.name}</h3>\r\n                    <hr />\r\n                </div>                \r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-5 m-1\">\r\n                    <RenderDish dish={props.dish} />\r\n                </div>\r\n                <div className=\"col-12 col-md-5 m-1\">\r\n                    <RenderComments comments={props.comments} />\r\n                </div>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default DishDetail;\r\n\r\n*/","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\CommentFormComponent.js",["74","75","76"],"import React, { Component } from 'react';\r\n\r\nimport {   \r\n    Button, Modal, ModalBody, ModalHeader, Label, Row, Col\r\n} from \"reactstrap\";\r\n\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\n//// validators\r\nconst required = (val) => val && val.length; //value > 0\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\nclass CommentForm extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n        this.state = {\r\n            isCommentFormModalOpen: false\r\n        };\r\n\r\n        this.toggleCommentFormModal = this.toggleCommentFormModal.bind(this);\r\n        this.handleCommentFormSubmit = this.handleCommentFormSubmit.bind(this);\r\n\r\n    }\r\n\r\n    handleCommentFormSubmit(values) {\r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n\r\n\r\n    }\r\n\r\n    toggleCommentFormModal() {\r\n        this.setState({\r\n            isCommentFormModalOpen: !this.state.isCommentFormModalOpen\r\n        });\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <Button outline onClick={this.toggleCommentFormModal}>\r\n                    <span className=\"fa fa-comments fa-lg\"></span> Submit Comment\r\n                </Button>\r\n\r\n\r\n                {/* commentform  Modal */}\r\n                <Modal isOpen={this.state.isCommentFormModalOpen} toggle={this.toggleCommentFormModal} >\r\n                    <ModalHeader toggle={this.toggleCommentFormModal}> Submit Comment </ModalHeader>\r\n                    <ModalBody>\r\n\r\n                        <LocalForm onSubmit={(values) => this.handleCommentFormSubmit(values)}>\r\n\r\n                            {/* rating */}\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"rating\" md={12} >Rating</Label>\r\n                                <Col md={12}>\r\n                                    <Control.select model=\".rating\"\r\n                                        className=\"form-control\"\r\n                                        name=\"rating\"\r\n                                        id=\"rating\"\r\n                                        validators={{\r\n                                            required\r\n                                        }}\r\n                                    >\r\n                                        <option>Please Select</option>\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                    </Control.select>\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                        }}\r\n                                    />  \r\n                                </Col>\r\n                            </Row>\r\n\r\n\r\n                            {/* author */}\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"author\" md={12}> Your Name </Label>\r\n                                <Col md={12}>\r\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />                                    \r\n                                </Col>\r\n                            </Row>\r\n\r\n\r\n\r\n\r\n                            {/* comment */}\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"comment\" md={12}>Comment</Label>\r\n                                <Col md={12}>\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                        rows=\"6\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                        }}\r\n                                    />  \r\n                                </Col>\r\n\r\n                            </Row>\r\n\r\n                            {/* submit button */}\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Submit\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </LocalForm>\r\n\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommentForm;","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\AboutComponent.js",["77"],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\leaders.js",[],{"ruleId":"78","severity":1,"message":"79","line":36,"column":3,"nodeType":"80","messageId":"81","endLine":38,"endColumn":4},{"ruleId":"82","severity":1,"message":"83","line":5,"column":33,"nodeType":"84","messageId":"85","endLine":5,"endColumn":40},{"ruleId":"86","severity":1,"message":"87","line":63,"column":29,"nodeType":"88","endLine":63,"endColumn":71},{"ruleId":"89","severity":1,"message":"90","line":77,"column":37,"nodeType":"88","endLine":77,"endColumn":232},{"ruleId":"89","severity":1,"message":"90","line":84,"column":37,"nodeType":"88","endLine":84,"endColumn":227},{"ruleId":"89","severity":1,"message":"90","line":91,"column":37,"nodeType":"88","endLine":91,"endColumn":233},{"ruleId":"89","severity":1,"message":"90","line":98,"column":37,"nodeType":"88","endLine":98,"endColumn":176},{"ruleId":"89","severity":1,"message":"91","line":106,"column":45,"nodeType":"88","endLine":106,"endColumn":122},{"ruleId":"89","severity":1,"message":"92","line":112,"column":37,"nodeType":"88","endLine":113,"endColumn":66},{"ruleId":"89","severity":1,"message":"93","line":122,"column":37,"nodeType":"88","endLine":124,"endColumn":68},{"ruleId":"82","severity":1,"message":"94","line":6,"column":10,"nodeType":"84","messageId":"85","endLine":6,"endColumn":20},{"ruleId":"82","severity":1,"message":"95","line":6,"column":22,"nodeType":"84","messageId":"85","endLine":6,"endColumn":33},{"ruleId":"82","severity":1,"message":"96","line":6,"column":35,"nodeType":"84","messageId":"85","endLine":6,"endColumn":48},{"ruleId":"82","severity":1,"message":"97","line":6,"column":50,"nodeType":"84","messageId":"85","endLine":6,"endColumn":61},{"ruleId":"82","severity":1,"message":"98","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},{"ruleId":"82","severity":1,"message":"99","line":2,"column":25,"nodeType":"84","messageId":"85","endLine":2,"endColumn":39},{"ruleId":"89","severity":1,"message":"92","line":61,"column":37,"nodeType":"88","endLine":68,"endColumn":38},{"ruleId":"89","severity":1,"message":"90","line":92,"column":37,"nodeType":"88","endLine":98,"endColumn":39},{"ruleId":"89","severity":1,"message":"93","line":119,"column":37,"nodeType":"88","endLine":125,"endColumn":39},{"ruleId":"82","severity":1,"message":"100","line":13,"column":10,"nodeType":"84","messageId":"85","endLine":13,"endColumn":23},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'actions' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'addComment' is defined but never used.","'fetchDishes' is defined but never used.","'fetchComments' is defined but never used.","'fetchPromos' is defined but never used.","'Component' is defined but never used.","'CardImgOverlay' is defined but never used.","'FadeTransform' is defined but never used."]