[{"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\configureStore.js":"1","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\MainComponent.js":"2","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\ContactComponent.js":"3","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionTypes.js":"4","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionCreators.js":"5","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\comments.js":"6","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\promotions.js":"7","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\MenuComponent.js":"8","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\HomeComponent.js":"9","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\DishDetailComponent.js":"10","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\CommentFormComponent.js":"11"},{"size":794,"mtime":1617290034874,"results":"12","hashOfConfig":"13"},{"size":3207,"mtime":1617440297550,"results":"14","hashOfConfig":"13"},{"size":10989,"mtime":1617290523307,"results":"15","hashOfConfig":"13"},{"size":411,"mtime":1617426515447,"results":"16","hashOfConfig":"13"},{"size":4118,"mtime":1617441088742,"results":"17","hashOfConfig":"13"},{"size":539,"mtime":1617440178492,"results":"18","hashOfConfig":"13"},{"size":683,"mtime":1617427465396,"results":"19","hashOfConfig":"13"},{"size":2476,"mtime":1617428406464,"results":"20","hashOfConfig":"13"},{"size":1589,"mtime":1617438423733,"results":"21","hashOfConfig":"13"},{"size":6342,"mtime":1617441356114,"results":"22","hashOfConfig":"13"},{"size":6467,"mtime":1617440938160,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j4qpmy",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\configureStore.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\MainComponent.js",["49"],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\ContactComponent.js",["50","51","52","53","54","55","56","57","58"],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionTypes.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\ActionCreators.js",["59"],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\comments.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\redux\\promotions.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\MenuComponent.js",["60","61","62","63"],"import React from 'react';\r\nimport { Card, CardImg, CardImgOverlay,\r\n    CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { addComment, fetchDishes, fetchComments, fetchPromos } from '../redux/ActionCreators';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\n    function RenderMenuItem ({dish, onClick}) {\r\n        return (\r\n            <Card>\r\n                <Link to={`/menu/${dish.id}`} >\r\n                <CardImg width=\"100%\" src={baseUrl + dish.image} alt={dish.name} />\r\n                    <CardImgOverlay>\r\n                        <CardTitle>{dish.name}</CardTitle>\r\n                    </CardImgOverlay>\r\n                </Link>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    const Menu = (props) => {\r\n\r\n        const menu = props.dishes.dishes.map((dish) => {\r\n            return (\r\n                <div className=\"col-12 col-md-5 m-1\"  key={dish.id}>\r\n                    <RenderMenuItem dish={dish} />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        if (props.dishes.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.dishes.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\"> \r\n                        <div className=\"col-12\">\r\n                            <h4>{props.dishes.errMess}</h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                            <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <div className=\"col-12\">\r\n                            <h3>Menu</h3>\r\n                            <hr />\r\n                        </div>                \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        {menu}\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n\r\nexport default Menu;","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\HomeComponent.js",[],"C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\DishDetailComponent.js",["64","65"],"import React, { Component } from \"react\";\r\nimport { Card, CardImg, CardImgOverlay, CardTitle, Breadcrumb, BreadcrumbItem, CardBody, CardText } from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\n/* import {\r\n    Button, Modal, ModalBody, ModalHeader, Label, Row, Col\r\n} from \"reactstrap\";\r\nimport { Control, LocalForm, Errors } from 'react-redux-form'; */\r\nimport { Loading } from './LoadingComponent';\r\nimport CommentForm from \"./CommentFormComponent\";\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nfunction RenderDish({dish}) {\r\n    if (dish != null) {\r\n        return (\r\n            <div className='col-12 col-md-5 m-1'>\r\n                <Card>\r\n                <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n                    <CardBody>\r\n                        <CardTitle> {dish.name}</CardTitle>\r\n                        <CardText> {dish.description} </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>   \r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction RenderComments({comments, postComment, dishId}){\r\n    if (comments == null) {\r\n        return (<div></div>)\r\n    }\r\n    const cmnts = comments.map(comment => {\r\n        return (\r\n\r\n            <li key={comment.id}>\r\n                <p>{comment.comment}</p>\r\n                <p>-- {comment.author},\r\n                &nbsp;\r\n                {new Intl.DateTimeFormat('en-US', {\r\n                    year: 'numeric',\r\n                    month: 'long',\r\n                    day: '2-digit'\r\n                }).format(new Date(comment.date))}\r\n                </p>\r\n            </li>\r\n\r\n        )\r\n    })\r\n    return (\r\n        <div className='col-12 col-md-5 m-1'>\r\n            <h4> Comments </h4>\r\n            <ul className='list-unstyled'>\r\n                {cmnts}\r\n            </ul>\r\n            <CommentForm dishId={dishId} postComment={postComment} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst DishDetail = (props) => {\r\n    const dish = props.dish\r\n\r\n    if (props.isLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    else if (dish == null) {\r\n        return (<div></div>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem>\r\n                        <Link to=\"/menu\">Menu</Link>\r\n                    </BreadcrumbItem>\r\n                    <BreadcrumbItem active>\r\n                        { props.dish.name }\r\n                    </BreadcrumbItem>\r\n                </Breadcrumb>\r\n\r\n                <div className=\"col-12\">\r\n                    <h3> {props.dish.menu}</h3>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n\r\n            <div className='row'>\r\n                <RenderDish dish={ props.dish } />\r\n                <RenderComments comments={ props.comments }\r\n                    postComment={props.postComment}\r\n                    dishId={props.dish.id} />\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DishDetail; \r\n\r\n/*\r\n------------------------------BEFORE FEEDBACK FORM-------------------------------\r\nimport React from 'react';\r\nimport { Card, CardImg, CardText, CardBody,\r\n    CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction RenderDish({dish}){\r\n    if (dish != null){\r\n        return(\r\n            <div className=\"col-12 col-md-5 m-1\"> \r\n                <Card >\r\n                    <CardImg top src={dish.image} alt={dish.name}/>\r\n                    <CardBody>\r\n                        <CardTitle>{dish.name} </CardTitle>\r\n                        <CardText> {dish.description} </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>    \r\n        );\r\n    }else{\r\n        return (<div></div>);\r\n    }\r\n}\r\n\r\nfunction RenderComments({comments}){\r\n    if (comments != null){\r\n        return(\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <h4> Comments </h4>\r\n                <div className=\"container\">\r\n                <ul className=\"list-unstyled\">\r\n                        {\r\n                            comments.map((comment)=>{\r\n                                return(\r\n                                    <li className=\"row\" key={comment.id}><p>{comment.comment}</p>\r\n                                    <p>-- {comment.author}, {new Intl.DateTimeFormat('en-US',{year: 'numeric', month: 'short', day:'2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                                    </li>    \r\n                                );\r\n                            })\r\n                        }\r\n                </ul>  \r\n                </div>      \r\n            </div>\r\n        );\r\n    }else{\r\n        return (<div></div>);\r\n    }\r\n}\r\n\r\nconst DishDetail = (props) => { \r\n    console.log(\"DishDetail Component render invoked\")\r\n    if(props.dish == null){\r\n        return(\r\n            <div></div>\r\n        );\r\n    }else{\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>{props.dish.name}</h3>\r\n                    <hr />\r\n                </div>                \r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-5 m-1\">\r\n                    <RenderDish dish={props.dish} />\r\n                </div>\r\n                <div className=\"col-12 col-md-5 m-1\">\r\n                    <RenderComments comments={props.comments} />\r\n                </div>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default DishDetail;\r\n\r\n*/","C:\\Users\\heman\\Desktop\\Coursera\\React\\confusion\\src\\components\\CommentFormComponent.js",["66","67","68"],"import React, { Component } from 'react';\r\n\r\nimport {   \r\n    Button, Modal, ModalBody, ModalHeader, Label, Row, Col\r\n} from \"reactstrap\";\r\n\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\n//// validators\r\nconst required = (val) => val && val.length; //value > 0\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\nclass CommentForm extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n        this.state = {\r\n            isCommentFormModalOpen: false\r\n        };\r\n\r\n        this.toggleCommentFormModal = this.toggleCommentFormModal.bind(this);\r\n        this.handleCommentFormSubmit = this.handleCommentFormSubmit.bind(this);\r\n\r\n    }\r\n\r\n    handleCommentFormSubmit(values) {\r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n\r\n\r\n    }\r\n\r\n    toggleCommentFormModal() {\r\n        this.setState({\r\n            isCommentFormModalOpen: !this.state.isCommentFormModalOpen\r\n        });\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <Button outline onClick={this.toggleCommentFormModal}>\r\n                    <span className=\"fa fa-comments fa-lg\"></span> Submit Comment\r\n                </Button>\r\n\r\n\r\n                {/* commentform  Modal */}\r\n                <Modal isOpen={this.state.isCommentFormModalOpen} toggle={this.toggleCommentFormModal} >\r\n                    <ModalHeader toggle={this.toggleCommentFormModal}> Submit Comment </ModalHeader>\r\n                    <ModalBody>\r\n\r\n                        <LocalForm onSubmit={(values) => this.handleCommentFormSubmit(values)}>\r\n\r\n                            {/* rating */}\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"rating\" md={12} >Rating</Label>\r\n                                <Col md={12}>\r\n                                    <Control.select model=\".rating\"\r\n                                        className=\"form-control\"\r\n                                        name=\"rating\"\r\n                                        id=\"rating\"\r\n                                        validators={{\r\n                                            required\r\n                                        }}\r\n                                    >\r\n                                        <option>Please Select</option>\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                    </Control.select>\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                        }}\r\n                                    />  \r\n                                </Col>\r\n                            </Row>\r\n\r\n\r\n                            {/* author */}\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"author\" md={12}> Your Name </Label>\r\n                                <Col md={12}>\r\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />                                    \r\n                                </Col>\r\n                            </Row>\r\n\r\n\r\n\r\n\r\n                            {/* comment */}\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"comment\" md={12}>Comment</Label>\r\n                                <Col md={12}>\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                        rows=\"6\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                        }}\r\n                                    />  \r\n                                </Col>\r\n\r\n                            </Row>\r\n\r\n                            {/* submit button */}\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Submit\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </LocalForm>\r\n\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommentForm;",{"ruleId":"69","severity":1,"message":"70","line":33,"column":3,"nodeType":"71","messageId":"72","endLine":35,"endColumn":4},{"ruleId":"73","severity":1,"message":"74","line":5,"column":33,"nodeType":"75","messageId":"76","endLine":5,"endColumn":40},{"ruleId":"77","severity":1,"message":"78","line":62,"column":29,"nodeType":"79","endLine":62,"endColumn":71},{"ruleId":"80","severity":1,"message":"81","line":76,"column":37,"nodeType":"79","endLine":82,"endColumn":44},{"ruleId":"80","severity":1,"message":"81","line":98,"column":37,"nodeType":"79","endLine":104,"endColumn":44},{"ruleId":"80","severity":1,"message":"81","line":120,"column":37,"nodeType":"79","endLine":126,"endColumn":44},{"ruleId":"80","severity":1,"message":"81","line":143,"column":37,"nodeType":"79","endLine":149,"endColumn":44},{"ruleId":"80","severity":1,"message":"82","line":165,"column":45,"nodeType":"79","endLine":167,"endColumn":52},{"ruleId":"80","severity":1,"message":"83","line":173,"column":37,"nodeType":"79","endLine":174,"endColumn":66},{"ruleId":"80","severity":1,"message":"84","line":183,"column":37,"nodeType":"79","endLine":185,"endColumn":68},{"ruleId":"73","severity":1,"message":"85","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":16},{"ruleId":"73","severity":1,"message":"86","line":6,"column":10,"nodeType":"75","messageId":"76","endLine":6,"endColumn":20},{"ruleId":"73","severity":1,"message":"87","line":6,"column":22,"nodeType":"75","messageId":"76","endLine":6,"endColumn":33},{"ruleId":"73","severity":1,"message":"88","line":6,"column":35,"nodeType":"75","messageId":"76","endLine":6,"endColumn":48},{"ruleId":"73","severity":1,"message":"89","line":6,"column":50,"nodeType":"75","messageId":"76","endLine":6,"endColumn":61},{"ruleId":"73","severity":1,"message":"90","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":26},{"ruleId":"73","severity":1,"message":"91","line":2,"column":25,"nodeType":"75","messageId":"76","endLine":2,"endColumn":39},{"ruleId":"80","severity":1,"message":"83","line":61,"column":37,"nodeType":"79","endLine":68,"endColumn":38},{"ruleId":"80","severity":1,"message":"81","line":92,"column":37,"nodeType":"79","endLine":98,"endColumn":39},{"ruleId":"80","severity":1,"message":"84","line":119,"column":37,"nodeType":"79","endLine":125,"endColumn":39},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'actions' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'DISHES' is defined but never used.","'addComment' is defined but never used.","'fetchDishes' is defined but never used.","'fetchComments' is defined but never used.","'fetchPromos' is defined but never used.","'Component' is defined but never used.","'CardImgOverlay' is defined but never used."]